name: Auto Version Update

# Purpose: Automatically bumps version in package.json based on conventional commits
# when a pull request is merged to main.

on:
  pull_request:
    types: [closed]
    branches:
      - main
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".github/dependabot.yml"

jobs:
  auto-version:
    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      bump_type: ${{ steps.conventional-commits.outputs.bump_type }}
      new_version: ${{ steps.version-update.outputs.new_version }}
      should_release: ${{ steps.version-update.outputs.should_release }}

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # Determine version bump using a proven action
      - name: Conventional Commits Analysis
        id: conventional-commits
        uses: TriPSs/conventional-changelog-action@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          skip-version-file: false
          skip-commit: true
          git-push: true
          git-message: "chore(release): {version}"
          skip-tag: true
          skip-on-empty: true

      # Update version in package.json if bump type is not none
      - name: Update package.json version
        id: version-update
        if: steps.conventional-commits.outputs.bump_type != ''
        run: |
          BUMP_TYPE=${{ steps.conventional-commits.outputs.bump_type }}
          echo "Bumping version: $BUMP_TYPE"

          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Use npm version to update the version in package.json
          npm version $BUMP_TYPE --no-git-tag-version

          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "should_release=true" >> $GITHUB_OUTPUT

          # Verify version doesn't already exist as a tag
          if git ls-remote --tags origin | grep -q "refs/tags/v$NEW_VERSION"; then
            # Increment patch version again to avoid conflict
            echo "Version v$NEW_VERSION already exists, incrementing patch version again"
            npm version patch --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "Adjusted new version: $NEW_VERSION"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

          # Commit changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore(release): bump version to $NEW_VERSION [skip ci]"
          git push

      # Write version info to artifact if update was needed
      - name: Save version info
        if: steps.conventional-commits.outputs.bump_type != ''
        run: |
          mkdir -p artifacts
          echo '{"new_version": "${{ steps.version-update.outputs.new_version }}", "should_release": ${{ steps.version-update.outputs.should_release }}}' > artifacts/version-info.json
          cat artifacts/version-info.json

      # Upload version info artifact
      - name: Upload version info artifact
        if: steps.conventional-commits.outputs.bump_type != ''
        uses: actions/upload-artifact@v4
        with:
          name: version-info
          path: artifacts/version-info.json
