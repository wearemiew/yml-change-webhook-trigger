name: Auto Version Update

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  auto-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      bump_type: ${{ steps.version-bump.outputs.bump_type }}
      new_version: ${{ steps.version-update.outputs.new_version }}
      should_release: ${{ steps.version-update.outputs.should_release }}

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # Filter out CI commits to prevent infinite loops
      - name: Filter CI commits
        id: filter-ci
        run: |
          if git log --pretty="%s" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -q "\[skip ci\]"; then
            echo "Skip CI flag found in PR commits, skipping version bump"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "No skip CI flags found, proceeding with version bump"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      # Determine version bump type based on conventional commits in PR
      - name: Determine version bump
        id: version-bump
        if: steps.filter-ci.outputs.skip != 'true'
        run: |
          # Only run when PR is merged, not when it's just closed
          if [[ "${{ github.event.pull_request.merged }}" != "true" ]]; then
            echo "Pull request was closed without merging - skipping version bump"
            echo "bump_type=none" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get the base and head SHAs for the PR
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          echo "PR from $BASE_SHA to $HEAD_SHA"

          # Get all commits in the PR
          echo "Commits in this PR:"
          git log --pretty=format:"%h %s" $BASE_SHA..$HEAD_SHA

          # Find all conventional commits in the PR
          HIGHEST_BUMP="none"

          # Search for breaking changes (major bump)
          if git log --pretty="%s %b" $BASE_SHA..$HEAD_SHA | grep -q -E "^feat(\(|:).*BREAKING CHANGE"; then
            echo "Found BREAKING CHANGE commit in PR"
            HIGHEST_BUMP="major"
          # Search for features (minor bump) if no major bump found
          elif [[ "$HIGHEST_BUMP" == "none" ]] && git log --pretty="%s" $BASE_SHA..$HEAD_SHA | grep -q -E "^feat(\(|:)"; then
            echo "Found feature commit in PR"
            HIGHEST_BUMP="minor"
          # Search for fixes or performance improvements (patch bump) if no major or minor bump found
          elif [[ "$HIGHEST_BUMP" == "none" ]] && git log --pretty="%s" $BASE_SHA..$HEAD_SHA | grep -q -E "^(fix|perf)(\(|:)"; then
            echo "Found fix or performance commit in PR"
            HIGHEST_BUMP="patch"
          else
            echo "No conventional commits found in PR"
          fi

          echo "Highest bump type: $HIGHEST_BUMP"
          echo "bump_type=$HIGHEST_BUMP" >> $GITHUB_OUTPUT

      # Update version in package.json if bump type is not none
      - name: Update package.json version
        id: version-update
        if: steps.version-bump.outputs.bump_type != 'none' && steps.filter-ci.outputs.skip != 'true'
        run: |
          BUMP_TYPE=${{ steps.version-bump.outputs.bump_type }}
          echo "Bumping version: $BUMP_TYPE"

          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Use npm version to update the version in package.json
          npm version $BUMP_TYPE --no-git-tag-version

          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "should_release=true" >> $GITHUB_OUTPUT

          # Verify version doesn't already exist as a tag
          if git ls-remote --tags origin | grep -q "refs/tags/v$NEW_VERSION"; then
            # Increment patch version again to avoid conflict
            echo "Version v$NEW_VERSION already exists, incrementing patch version again"
            npm version patch --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "Adjusted new version: $NEW_VERSION"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

          # Commit changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore(release): bump version to $NEW_VERSION [skip ci]"
          git push

      # Write version info to artifact if update was needed
      - name: Save version info
        if: steps.version-bump.outputs.bump_type != 'none' && steps.filter-ci.outputs.skip != 'true'
        run: |
          mkdir -p artifacts
          echo '{"new_version": "${{ steps.version-update.outputs.new_version }}", "should_release": ${{ steps.version-update.outputs.should_release }}}' > artifacts/version-info.json
          cat artifacts/version-info.json

      # Upload version info artifact
      - name: Upload version info artifact
        if: steps.version-bump.outputs.bump_type != 'none' && steps.filter-ci.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: version-info
          path: artifacts/version-info.json
