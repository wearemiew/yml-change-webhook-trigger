name: Automated Build and Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'package.json'
      - 'src/**'
      - 'dist/**'
      - 'action.yml'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      # Install dependencies
      - name: Install dependencies
        run: npm ci
      
      # Run tests to ensure everything is working
      - name: Run tests
        run: NODE_ENV=test npx jest --config jest.config.js --passWithNoTests
        shell: bash
      
      # Build the action using ncc (creates the dist directory)
      - name: Build action
        run: npm run build
      
      # Get package version from package.json
      - name: Get version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
      
      # Determine if we need to create a new release
      - name: Check if version exists
        id: version-check
        run: |
          VERSION="v${{ steps.package-version.outputs.current-version }}"
          echo "Version from package.json: $VERSION"
          
          # This is a safeguard - our auto-version workflow should ensure this condition is false
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION"; then
            echo "Warning: Version $VERSION already exists as a tag."
            echo "This should have been handled by the auto-version workflow."
            echo "Force proceeding with release creation anyway."
            echo "new_release_required=true" >> $GITHUB_OUTPUT
            echo "release_version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION does not exist yet. Creating new release."
            echo "new_release_required=true" >> $GITHUB_OUTPUT
            echo "release_version=$VERSION" >> $GITHUB_OUTPUT
          fi
      
      # Force add dist directory (even if it's in .gitignore)
      - name: Commit built files
        if: steps.version-check.outputs.new_release_required == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -f dist/
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Build dist files for v${{ steps.package-version.outputs.current-version }}"
            git push
          fi
      
      # Create a new release
      - name: Create Release
        if: steps.version-check.outputs.new_release_required == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version-check.outputs.release_version }}
          name: Release ${{ steps.version-check.outputs.release_version }}
          body: |
            Automated release for version ${{ steps.version-check.outputs.release_version }}
            
            This release was automatically created from the latest code pushed to the main branch.
            
            ## What's Changed
            * See the [commit history](https://github.com/${{ github.repository }}/commits/main) for details of changes since the last release.
            
            **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.version-check.outputs.release_version }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Create or update the major version tag (e.g., v1, v2) and other version tags
      - name: Update version tags
        if: steps.version-check.outputs.new_release_required == 'true'
        run: |
          VERSION="${{ steps.version-check.outputs.release_version }}"
          # Remove 'v' prefix if present
          VERSION_NUM=${VERSION#v}
          
          # Extract version components
          MAJOR=$(echo $VERSION_NUM | cut -d '.' -f 1)
          MINOR=$(echo $VERSION_NUM | cut -d '.' -f 2)
          
          # Create tags without 'v' prefix if original has it
          if [[ "$VERSION" == v* ]]; then
            # Create all version tags
            echo "Creating/updating version tags"
            
            # Major version tag with v prefix (e.g., v1)
            MAJOR_TAG="v$MAJOR"
            git tag -d $MAJOR_TAG || true
            git push origin :refs/tags/$MAJOR_TAG || true
            git tag $MAJOR_TAG
            git push origin $MAJOR_TAG
            echo "Major version tag $MAJOR_TAG now points to release $VERSION"
            
            # Major.Minor version tag with v prefix (e.g., v1.0)
            MAJOR_MINOR_TAG="v$MAJOR.$MINOR"
            git tag -d $MAJOR_MINOR_TAG || true
            git push origin :refs/tags/$MAJOR_MINOR_TAG || true
            git tag $MAJOR_MINOR_TAG
            git push origin $MAJOR_MINOR_TAG
            echo "Major.Minor version tag $MAJOR_MINOR_TAG now points to release $VERSION"
          fi

  # This job creates the GitHub Marketplace listing if it doesn't exist yet
  publish-to-marketplace:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: needs.build-and-release.outputs.new_release_required == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # You would need to use GitHub's API to programmatically publish to the marketplace
      # Currently, there's no direct GitHub Action for this
      # The below is a placeholder for manual verification
      - name: Verify Marketplace Requirements
        run: |
          echo "New release has been created!"
          echo "To publish to the GitHub Marketplace:"
          echo "1. Go to your repository releases page"
          echo "2. Find the latest release"
          echo "3. Edit the release"
          echo "4. Check 'Publish this Action to the GitHub Marketplace'"
          echo "5. Complete the additional marketplace information"
          echo "6. Save the changes"
          
          echo "Note: Currently, the final step of publishing to the marketplace requires manual intervention."
          echo "Consider using GitHub REST API for fully automated publishing in the future."
