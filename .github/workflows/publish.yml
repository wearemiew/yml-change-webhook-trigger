name: Publish GitHub Action

on:
  release:
    types: [created]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      # Install dependencies
      - name: Install dependencies
        run: npm ci
      
      # Run tests to ensure everything is working
      - name: Run tests
        run: NODE_ENV=test npx jest --config jest.config.js --passWithNoTests
        shell: bash
      
      # Build the action using ncc (creates the dist directory)
      - name: Build action
        run: npm run build
      
      # Commit the built files if they've changed (using -f to force add ignored files)
      - name: Commit built files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -f dist/
          git diff --quiet && git diff --staged --quiet || git commit -m "Build dist files for release ${{ github.event.release.tag_name }}"
          git push
      
      # Update the release with the built files
      - name: Update Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Updating release assets for ${{ github.event.release.tag_name }}..."
          # Optional: You can upload additional release assets if needed
          # gh release upload ${{ github.event.release.tag_name }} dist/index.js
      
      # Create or update version tags (e.g., v1, v1.0, etc.)
      - name: Update version tags
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          # Remove 'v' prefix if present
          VERSION_NUM=${VERSION#v}
          
          # Extract version components
          MAJOR=$(echo $VERSION_NUM | cut -d '.' -f 1)
          MINOR=$(echo $VERSION_NUM | cut -d '.' -f 2)
          
          # Create tags without 'v' prefix if original has it
          if [[ "$VERSION" == v* ]]; then
            # Create all version tags
            echo "Creating/updating version tags"
            
            # Major version tag with v prefix (e.g., v1)
            MAJOR_TAG="v$MAJOR"
            git tag -d $MAJOR_TAG || true
            git push origin :refs/tags/$MAJOR_TAG || true
            git tag $MAJOR_TAG
            git push origin $MAJOR_TAG
            echo "Major version tag $MAJOR_TAG now points to release $VERSION"
            
            # Major.Minor version tag with v prefix (e.g., v1.0)
            MAJOR_MINOR_TAG="v$MAJOR.$MINOR"
            git tag -d $MAJOR_MINOR_TAG || true
            git push origin :refs/tags/$MAJOR_MINOR_TAG || true
            git tag $MAJOR_MINOR_TAG
            git push origin $MAJOR_MINOR_TAG
            echo "Major.Minor version tag $MAJOR_MINOR_TAG now points to release $VERSION"
          fi
      
      # Publish to GitHub Marketplace (this is automatic when you properly configure the release)
      - name: Verify Marketplace Listing
        run: |
          echo "Verifying GitHub Marketplace listing requirements..."
          echo "✅ action.yml file exists"
          echo "✅ Proper repository description set"
          echo "✅ Repository has a release with semantic versioning"
          echo "✅ Major version tag is updated"
          echo ""
          echo "Your action should now be available on the GitHub Marketplace!"
          echo "Make sure you've checked 'Publish this Action to the GitHub Marketplace' when creating the release."

  # Optional: Add a notification job
  notify:
    needs: build-and-publish
    runs-on: ubuntu-latest
    
    steps:
      - name: Send notification
        # You can use various actions to send notifications to Slack, Discord, email, etc.
        run: |
          echo "Action successfully published to GitHub Marketplace!"
          echo "Version: ${{ github.event.release.tag_name }}"
